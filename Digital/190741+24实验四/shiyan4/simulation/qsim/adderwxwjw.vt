// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/03/2020 13:45:23"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Block1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Block1_vlg_sample_tst(
	in1,
	in2,
	sampler_tx
);
input [3:0] in1;
input [3:0] in2;
output sampler_tx;

reg sample;
time current_time;
always @(in1 or in2)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Block1_vlg_check_tst (
	a,
	b,
	c,
	d,
	e,
	f,
	g,
	led,
	yinji,
	sampler_rx
);
input  a;
input  b;
input  c;
input  d;
input  e;
input  f;
input  g;
input  led;
input  yinji;
input sampler_rx;

reg  a_expected;
reg  b_expected;
reg  c_expected;
reg  d_expected;
reg  e_expected;
reg  f_expected;
reg  g_expected;
reg  led_expected;
reg  yinji_expected;

reg  a_prev;
reg  b_prev;
reg  c_prev;
reg  d_prev;
reg  e_prev;
reg  f_prev;
reg  g_prev;
reg  led_prev;
reg  yinji_prev;

reg  a_expected_prev;
reg  b_expected_prev;
reg  c_expected_prev;
reg  d_expected_prev;
reg  e_expected_prev;
reg  f_expected_prev;
reg  g_expected_prev;
reg  led_expected_prev;
reg  yinji_expected_prev;

reg  last_a_exp;
reg  last_b_exp;
reg  last_c_exp;
reg  last_d_exp;
reg  last_e_exp;
reg  last_f_exp;
reg  last_g_exp;
reg  last_led_exp;
reg  last_yinji_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:9] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 9'b1;
end

// update real /o prevs

always @(trigger)
begin
	a_prev = a;
	b_prev = b;
	c_prev = c;
	d_prev = d;
	e_prev = e;
	f_prev = f;
	g_prev = g;
	led_prev = led;
	yinji_prev = yinji;
end

// update expected /o prevs

always @(trigger)
begin
	a_expected_prev = a_expected;
	b_expected_prev = b_expected;
	c_expected_prev = c_expected;
	d_expected_prev = d_expected;
	e_expected_prev = e_expected;
	f_expected_prev = f_expected;
	g_expected_prev = g_expected;
	led_expected_prev = led_expected;
	yinji_expected_prev = yinji_expected;
end



// expected a
initial
begin
	a_expected = 1'bX;
end 

// expected b
initial
begin
	b_expected = 1'bX;
end 

// expected c
initial
begin
	c_expected = 1'bX;
end 

// expected d
initial
begin
	d_expected = 1'bX;
end 

// expected e
initial
begin
	e_expected = 1'bX;
end 

// expected f
initial
begin
	f_expected = 1'bX;
end 

// expected g
initial
begin
	g_expected = 1'bX;
end 

// expected led
initial
begin
	led_expected = 1'bX;
end 

// expected yinji
initial
begin
	yinji_expected = 1'bX;
end 
// generate trigger
always @(a_expected or a or b_expected or b or c_expected or c or d_expected or d or e_expected or e or f_expected or f or g_expected or g or led_expected or led or yinji_expected or yinji)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected a = %b | expected b = %b | expected c = %b | expected d = %b | expected e = %b | expected f = %b | expected g = %b | expected led = %b | expected yinji = %b | ",a_expected_prev,b_expected_prev,c_expected_prev,d_expected_prev,e_expected_prev,f_expected_prev,g_expected_prev,led_expected_prev,yinji_expected_prev);
	$display("| real a = %b | real b = %b | real c = %b | real d = %b | real e = %b | real f = %b | real g = %b | real led = %b | real yinji = %b | ",a_prev,b_prev,c_prev,d_prev,e_prev,f_prev,g_prev,led_prev,yinji_prev);
`endif
	if (
		( a_expected_prev !== 1'bx ) && ( a_prev !== a_expected_prev )
		&& ((a_expected_prev !== last_a_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp = a_expected_prev;
	end
	if (
		( b_expected_prev !== 1'bx ) && ( b_prev !== b_expected_prev )
		&& ((b_expected_prev !== last_b_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp = b_expected_prev;
	end
	if (
		( c_expected_prev !== 1'bx ) && ( c_prev !== c_expected_prev )
		&& ((c_expected_prev !== last_c_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_c_exp = c_expected_prev;
	end
	if (
		( d_expected_prev !== 1'bx ) && ( d_prev !== d_expected_prev )
		&& ((d_expected_prev !== last_d_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d_expected_prev);
		$display ("     Real value = %b", d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_d_exp = d_expected_prev;
	end
	if (
		( e_expected_prev !== 1'bx ) && ( e_prev !== e_expected_prev )
		&& ((e_expected_prev !== last_e_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port e :: @time = %t",  $realtime);
		$display ("     Expected value = %b", e_expected_prev);
		$display ("     Real value = %b", e_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_e_exp = e_expected_prev;
	end
	if (
		( f_expected_prev !== 1'bx ) && ( f_prev !== f_expected_prev )
		&& ((f_expected_prev !== last_f_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_expected_prev);
		$display ("     Real value = %b", f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_f_exp = f_expected_prev;
	end
	if (
		( g_expected_prev !== 1'bx ) && ( g_prev !== g_expected_prev )
		&& ((g_expected_prev !== last_g_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port g :: @time = %t",  $realtime);
		$display ("     Expected value = %b", g_expected_prev);
		$display ("     Real value = %b", g_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_g_exp = g_expected_prev;
	end
	if (
		( led_expected_prev !== 1'bx ) && ( led_prev !== led_expected_prev )
		&& ((led_expected_prev !== last_led_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_expected_prev);
		$display ("     Real value = %b", led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_led_exp = led_expected_prev;
	end
	if (
		( yinji_expected_prev !== 1'bx ) && ( yinji_prev !== yinji_expected_prev )
		&& ((yinji_expected_prev !== last_yinji_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port yinji :: @time = %t",  $realtime);
		$display ("     Expected value = %b", yinji_expected_prev);
		$display ("     Real value = %b", yinji_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_yinji_exp = yinji_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Block1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] in1;
reg [3:0] in2;
// wires                                               
wire a;
wire b;
wire c;
wire d;
wire e;
wire f;
wire g;
wire led;
wire yinji;

wire sampler;                             

// assign statements (if any)                          
Block1 i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.c(c),
	.d(d),
	.e(e),
	.f(f),
	.g(g),
	.in1(in1),
	.in2(in2),
	.led(led),
	.yinji(yinji)
);
// in1[ 3 ]
initial
begin
	repeat(2)
	begin
		in1[3] = 1'b0;
		in1[3] = #240000 1'b1;
		# 240000;
	end
	in1[3] = 1'b0;
end 
// in1[ 2 ]
initial
begin
	repeat(4)
	begin
		in1[2] = 1'b0;
		in1[2] = #120000 1'b1;
		# 120000;
	end
	in1[2] = 1'b0;
end 
// in1[ 1 ]
initial
begin
	repeat(8)
	begin
		in1[1] = 1'b0;
		in1[1] = #60000 1'b1;
		# 60000;
	end
	in1[1] = 1'b0;
end 
// in1[ 0 ]
initial
begin
	repeat(16)
	begin
		in1[0] = 1'b0;
		in1[0] = #30000 1'b1;
		# 30000;
	end
	in1[0] = 1'b0;
	in1[0] = #30000 1'b1;
end 
// in2[ 3 ]
initial
begin
	repeat(6)
	begin
		in2[3] = 1'b0;
		in2[3] = #80000 1'b1;
		# 80000;
	end
	in2[3] = 1'b0;
end 
// in2[ 2 ]
initial
begin
	repeat(12)
	begin
		in2[2] = 1'b0;
		in2[2] = #40000 1'b1;
		# 40000;
	end
	in2[2] = 1'b0;
end 
// in2[ 1 ]
always
begin
	in2[1] = 1'b0;
	in2[1] = #20000 1'b1;
	#20000;
end 
// in2[ 0 ]
always
begin
	in2[0] = 1'b0;
	in2[0] = #10000 1'b1;
	#10000;
end 

Block1_vlg_sample_tst tb_sample (
	.in1(in1),
	.in2(in2),
	.sampler_tx(sampler)
);

Block1_vlg_check_tst tb_out(
	.a(a),
	.b(b),
	.c(c),
	.d(d),
	.e(e),
	.f(f),
	.g(g),
	.led(led),
	.yinji(yinji),
	.sampler_rx(sampler)
);
endmodule

